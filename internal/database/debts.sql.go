// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: debts.sql

package database

import (
	"context"
)

const createDebt = `-- name: CreateDebt :one
INSERT INTO debts (created_at, modified_at, user_id, transaction_id, amount)
VALUES (?,?,?,?,?)
RETURNING id, transaction_id, user_id, amount, created_at, modified_at
`

type CreateDebtParams struct {
	CreatedAt     int64   `json:"created_at"`
	ModifiedAt    int64   `json:"modified_at"`
	UserID        int64   `json:"user_id"`
	TransactionID int64   `json:"transaction_id"`
	Amount        float64 `json:"amount"`
}

func (q *Queries) CreateDebt(ctx context.Context, arg CreateDebtParams) (Debt, error) {
	row := q.db.QueryRowContext(ctx, createDebt,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.UserID,
		arg.TransactionID,
		arg.Amount,
	)
	var i Debt
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getDebtsFromTransaction = `-- name: GetDebtsFromTransaction :many
SELECT id, transaction_id, user_id, amount, created_at, modified_at
FROM debts
WHERE transaction_id = ?
`

func (q *Queries) GetDebtsFromTransaction(ctx context.Context, transactionID int64) ([]Debt, error) {
	rows, err := q.db.QueryContext(ctx, getDebtsFromTransaction, transactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Debt
	for rows.Next() {
		var i Debt
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.UserID,
			&i.Amount,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
