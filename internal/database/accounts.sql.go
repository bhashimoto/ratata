// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: accounts.sql

package database

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (name, created_at, modified_at)
VALUES (?, ?, ?)
RETURNING id, name, created_at, modified_at
`

type CreateAccountParams struct {
	Name       string `json:"name"`
	CreatedAt  int64  `json:"created_at"`
	ModifiedAt int64  `json:"modified_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Name, arg.CreatedAt, arg.ModifiedAt)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, name, created_at, modified_at
FROM accounts
`

func (q *Queries) GetAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
