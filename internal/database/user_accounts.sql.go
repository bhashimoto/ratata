// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_accounts.sql

package database

import (
	"context"
)

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_accounts(user_id, account_id, created_at, modified_at)
VALUES(?,?,?,?)
RETURNING user_id, account_id, created_at, modified_at
`

type CreateUserAccountParams struct {
	UserID     int64 `json:"user_id"`
	AccountID  int64 `json:"account_id"`
	CreatedAt  int64 `json:"created_at"`
	ModifiedAt int64 `json:"modified_at"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount,
		arg.UserID,
		arg.AccountID,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	var i UserAccount
	err := row.Scan(
		&i.UserID,
		&i.AccountID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getAccountsByUser = `-- name: GetAccountsByUser :many
SELECT a.id, a.name, a.created_at, a.modified_at
FROM accounts a 
JOIN user_accounts ua ON a.id = ua.account_id
WHERE ua.user_id = ?
`

func (q *Queries) GetAccountsByUser(ctx context.Context, userID int64) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByAccount = `-- name: GetUsersByAccount :many
SELECT u.id, u.name, u.created_at, u.modified_at
FROM users u 
JOIN user_accounts ua ON u.id = ua.user_id
WHERE ua.account_id = ?
`

func (q *Queries) GetUsersByAccount(ctx context.Context, accountID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
